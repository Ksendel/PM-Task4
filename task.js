// В некоторых примерах применяется оператор '+', у которого один из аргументов строка,
// что в свою очередь приводит к строке и другой аргумент. (оператор выполняется слева на право)

console.log(2 + "2" === "2" + 2); // выведет: true, так как сравниваются одинаковые типы у которых string == '22'
console.log(2 + "3" === "3" + 2); // выведет: false, так как сравниваются строки '23' & '32'
console.log("3" + "2" === 3 + 2); // выведет: false, так как сравниваются два разных типа (string & number)
console.log("3" + "2" === "3" + 2); // выведет: true, так как сравниваются строки
// В этом примере рассматривается явное числинное преобразование. Ф-ия Number явно переобразовала тип string -> number
console.log(2 + Number("3") === Number("3") + 2)  // выведет: true, так как сравниваются одинаковые типы (number)

console.log(12 / "6") // выведет: 2, потому что: есть операция деления '/' (мат. выражение), по этому строки переобразуются в числа
console.log("number" + 15 + 3) /*  выведет: number153 ('number' + 15 + 3 ->'number15' + 3 -> 'number153'),
 потому что произошло строковое преобразование (неявное) */
// оператор '+' вызвал строковое преобразование числа сначала 15 и потом 3
console.log(15 + 3 + "number") /* выведет: 18number (18 + 'number' -> 18number), так как 2 числа числа, то они сумируются
без переобразования затем происходит стр. преобр. для числа 18 и 'number' */
console.log([1] > null) // выведет: true, '>' оператор сравнения вызыв. числ. преобр. для [1] (1 > 0)
console.log("foo" + +"bar") // выведет: 'fooNaN' ('+' 'bar' - выполняется первым, числ. преобр. в NaN, 'foo' + NaN )
console.log("true" === true) // выведет: false, так как оп. '===' вызывает числ. преобр., 'true' -> NaN (правый операнд true == 1)
console.log(false === "false") // выведет: false, так как оп. '===' вызывает числ. преобр., 'false' -> NaN (правый операнд false == 0)
console.log(null == '') // выведет: false, произошло исключение null == null || null == undefined
console.log(!!"false" === !!"true") // выведет: true, оператор '!!' конвертирует строки в bool и потом оп. '==' сравнил бул.
console.log(['x'] === 'x') // выведет: true, оператор '===' вызыв. числ. преобр. массива, потом происходит конвертация  [‘x’] в строку ‘x’.

const enemy = {
    name: 'Bob'
}

const friend = {
    name: 'Alex'
}

const me = friend // константе me присвоили обьект friend с полем name

me.name = 'Bob' // поменяли свойства полю name константе me

console.log(friend.name) // выводим значение поля name ('Bob') обьекта friend
console.log(me === friend) // true Bob === Bob (од. ссылки)
console.log(me === enemy) // false потому что эти переменные указывают на разные ссылки на объекты



